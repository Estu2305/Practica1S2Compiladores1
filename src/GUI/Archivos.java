/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Analisis.parser;
import Analisis.scanner;
import Archivos.Archivo;
import Excepciones.Errores;
import static GUI.Reportes.Animacion;
import static GUI.Reportes.Colores;
import static GUI.Reportes.Objeto;
import static GUI.Reportes.Operadores;
import Moldear.Forma;
import java.awt.Graphics;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SELVYN
 */
public class Archivos extends javax.swing.JFrame {

    /**
     * Creates new form Archivos
     */
    public Archivos() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtArchivo = new java.awt.TextArea();
        btnCompilar = new javax.swing.JButton();
        btnCargar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        VentanaInicio = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        VentanaArchivo = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        VentanaReportes = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtArchivo.setFont(new java.awt.Font("Eras Demi ITC", 3, 24)); // NOI18N
        getContentPane().add(txtArchivo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 950, 290));

        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCompilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 70, 100, -1));

        btnCargar.setText("Cargar");
        btnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCargar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 110, 100, -1));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 150, 100, -1));

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 190, 100, -1));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 230, 100, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Fondo/4819735.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 1160, 610));

        jMenu1.setText("Principal");

        VentanaInicio.setText("Inicio ");
        VentanaInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VentanaInicioActionPerformed(evt);
            }
        });
        jMenu1.add(VentanaInicio);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Cargar");

        VentanaArchivo.setText("Archivos");
        VentanaArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VentanaArchivoActionPerformed(evt);
            }
        });
        jMenu2.add(VentanaArchivo);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Informe");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        VentanaReportes.setText("Reportes");
        VentanaReportes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VentanaReportesActionPerformed(evt);
            }
        });
        jMenu3.add(VentanaReportes);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VentanaInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VentanaInicioActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Inicio prin = new Inicio();
        prin.setVisible(true);
    }//GEN-LAST:event_VentanaInicioActionPerformed

    private void VentanaArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VentanaArchivoActionPerformed
        // TODO add your handling code here:\
        this.setVisible(false);
        Archivos prin = new Archivos();
        prin.setVisible(true);
    }//GEN-LAST:event_VentanaArchivoActionPerformed

    private void VentanaReportesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VentanaReportesActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Reportes prin = new Reportes();
        prin.setVisible(true);

        // Leer el contenido del JTextArea
        String input = txtArchivo.getText();

        // HashMap para almacenar colores, figuras, operadores, y animaciones
        HashMap<String, Integer> coloresMap = new HashMap<>();
        HashMap<String, Integer> figurasMap = new HashMap<>();
        HashMap<String, List<String[]>> operadoresMap = new HashMap<>();
        HashMap<String, Integer> animacionesMap = new HashMap<>();

        // Expresiones regulares para colores, figuras, operadores y animaciones
        Pattern colorPattern = Pattern.compile("(amarillo|verde|rojo|azul|turquesa|fusia|gris|naranja|morado)");
        Pattern figuraPattern = Pattern.compile("(polígono|cuadrado|circulo|linea|rectangulo)");
        Pattern operadorPattern = Pattern.compile("(\\d+\\s*[+\\-*/]\\s*\\d+)");
        Pattern animacionPattern = Pattern.compile("(línea|curva)");

        // Mapeo de operadores a sus nombres
        HashMap<String, String> operadorNombre = new HashMap<>();
        operadorNombre.put("+", "suma");
        operadorNombre.put("-", "resta");
        operadorNombre.put("*", "multiplicación");
        operadorNombre.put("/", "división");

        // Procesar líneas del texto
        String[] lines = input.split("\\n");
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];

            // Buscar y contar colores
            Matcher colorMatcher = colorPattern.matcher(line);
            while (colorMatcher.find()) {
                String color = colorMatcher.group();
                coloresMap.put(color, coloresMap.getOrDefault(color, 0) + 1);
            }

            // Buscar y contar figuras
            Matcher figuraMatcher = figuraPattern.matcher(line);
            while (figuraMatcher.find()) {
                String figura = figuraMatcher.group();
                figurasMap.put(figura, figurasMap.getOrDefault(figura, 0) + 1);
            }

            // Buscar y contar operadores y almacenar línea, columna y operación completa
            Matcher operadorMatcher = operadorPattern.matcher(line);
            while (operadorMatcher.find()) {
                String operacionCompleta = operadorMatcher.group();
                String operador = operacionCompleta.replaceAll("\\d+\\s*([+\\-*/])\\s*\\d+", "$1");
                String nombre = operadorNombre.getOrDefault(operador, "desconocido");
                int columna = operadorMatcher.start() + 1;
                int linea = i + 1;
                String[] ubicacion = new String[]{String.valueOf(linea), String.valueOf(columna), operacionCompleta};
                operadoresMap.putIfAbsent(nombre, new LinkedList<>());
                operadoresMap.get(nombre).add(ubicacion);
            }

            // Buscar y contar animaciones (línea y curva)
            Matcher animacionMatcher = animacionPattern.matcher(line);
            while (animacionMatcher.find()) {
                String animacion = animacionMatcher.group();
                animacionesMap.put(animacion, animacionesMap.getOrDefault(animacion, 0) + 1);
            }
        }

        // Actualizar los modelos de las tablas ya existentes
        DefaultTableModel colorModel = (DefaultTableModel) Colores.getModel();
        DefaultTableModel animacionModel = (DefaultTableModel) Animacion.getModel();
        DefaultTableModel objetoModel = (DefaultTableModel) Objeto.getModel();
        DefaultTableModel operadorModel = (DefaultTableModel) Operadores.getModel();

        // Limpiar los modelos antes de agregar datos
        colorModel.setRowCount(0);
        animacionModel.setRowCount(0);
        objetoModel.setRowCount(0);
        operadorModel.setRowCount(0);

        // Llenar los modelos con los datos procesados
        coloresMap.forEach((color, count) -> colorModel.addRow(new Object[]{color, count}));
        figurasMap.forEach((figura, count) -> objetoModel.addRow(new Object[]{figura, count}));
        operadoresMap.forEach((operador, ubicaciones) -> {
            ubicaciones.forEach(ubicacion -> operadorModel.addRow(new Object[]{operador, ubicacion[0], ubicacion[1], ubicacion[2]}));
        });
        animacionesMap.forEach((animacion, count) -> animacionModel.addRow(new Object[]{animacion, count}));

    }//GEN-LAST:event_VentanaReportesActionPerformed

    private void btnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarActionPerformed
        // TODO add your handling code here:
        Archivo archivos = new Archivo();
        archivos.AbrirMOstrar(txtArchivo);
    }//GEN-LAST:event_btnCargarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        Archivo archivos = new Archivo();
        archivos.guardar(txtArchivo);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        Archivo archivos = new Archivo();
        archivos.crearArchivo(txtArchivo);

    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        // TODO add your handling code here:
        String input = txtArchivo.getText();
        StringReader reader = new StringReader(input);
        scanner s = new scanner(reader);  // Verifica el nombre correcto de la clase generada por JFlex
        parser pa = new parser(s);        // Verifica el nombre correcto de la clase generada por CUP

        try {
            pa.parse();  // Llama al método parse del parser
            ArrayList<Forma> formas = pa.formas;  // Usa la instancia del parser para acceder a las formas

            System.out.println("Número de formas procesadas: " + formas.size()); // Depuración

            if (formas.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hay formas para graficar", "Alerta", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            JFrame frame = new JFrame("Formas");
            frame.setSize(800, 600);
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            JPanel panel = new JPanel() {
                @Override
                public void paintComponent(Graphics g) {
                    super.paintComponent(g);  // Llama al método padre para limpiar el área de dibujo

                    for (Forma forma : formas) {
                        forma.dibujar(g);  // Llama al método dibujar de cada figura
                    }
                }
            };

            frame.add(panel);
            frame.setVisible(true);  // Muestra la ventana

        } catch (Exception e) {
            StringBuilder errores = new StringBuilder("Error en la entrada:\n");
            errores.append(e.getMessage()).append("\n");

            // Mostrar errores en la consola
            System.out.println("Error en la entrada:");
            System.out.println(e.getMessage());

            // También podrías querer mostrar errores específicos del parser aquí
            for (Errores error : pa.listaErrores) {
                String errorMsg = "Error: " + error.getContenido()
                        + " en línea " + error.getLinea()
                        + ", columna " + error.getColumna();
                errores.append(errorMsg).append("\n");

                // Mostrar error en la consola
                System.out.println(errorMsg);
            }

            JOptionPane.showMessageDialog(this, errores.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnCompilarActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
         txtArchivo.setText("");  // Limpiar el JTextArea cuando se presiona el botón
    }//GEN-LAST:event_btnLimpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Archivos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Archivos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem VentanaArchivo;
    private javax.swing.JMenuItem VentanaInicio;
    private javax.swing.JMenuItem VentanaReportes;
    private javax.swing.JButton btnCargar;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    public static java.awt.TextArea txtArchivo;
    // End of variables declaration//GEN-END:variables
}
